<?php
//======================================================================================================================
// This file is part of the Mudpuppy PHP framework, released under the MIT License. See LICENSE for full details.
//======================================================================================================================

namespace ___NAMESPACE___;

use Mudpuppy\Controller;
use Mudpuppy\PageController;
use Mudpuppy\DataObjectController;

defined('MUDPUPPY') or die('Restricted');

class ___CLASS_NAME___ extends Controller {
	use PageController;
	use DataObjectController;

	public function getRequiredPermissions() {
		// TODO add specific required permissions if any to access this controller
		return array();
	}

	/**
	 * @return array associative array with two keys, 'js' and 'css', each being an array of script paths for use by the
	 * default implementation of renderHeader()
	 */
	public function getScripts() {
		return [
			'js' => [],
			'css' => []
		];
	}

	/**
	 * Renders the page body.
	 */
	public function render() {
		include('___VIEW_FILE_PATH___');
	}

	/**
	 * return a list of regular expressions or strings that the page options must match
	 * example: a url of "this-controller/get/42" can be validated by array('#^get/[0-9]+$#');
	 * @return array
	 */
	public function getAllowablePathPatterns() {
		return [];
	}

	/**
	 * Determines whether an input object is valid prior to creating or updating it. Note: the input array has already
	 * been cleaned and validated against the structure definition.
	 * @param $object array representation of the object
	 * @return boolean true if valid
	 */
	protected function isValid($object) {
		// TODO validate the object
		return false;
	}

	/**
	 * Sanitizes the array representation of the object prior to returning to the user.
	 * @param array $object array representation of the object
	 * @return array that represents the sanitized object
	 */
	protected function sanitize($object) {
		// TODO sanitize the object if necessary
		return $object;
	}

	/**
	 * Uncomment to override the fetching of a collection '/DataObject/?p=1&...' using $params from the request
	 *
	 * Retrieves an array of DataObjects for use by getCollection. The default implementation returns ALL objects.
	 * Override to support filtering based on the query parameters.
	 * @param array $params array of query parameters that came in with the request
	 * @return array(DataObject)
	 */
//	protected function retrieveDataObjects($params) {
//		return call_user_func(array($this->getDataObjectName(), 'getAll'));
//	}


	// TODO add actions as desired

}